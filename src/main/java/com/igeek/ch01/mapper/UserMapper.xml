<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace的值：与当前Mapper.xml同名接口的全类名 -->
<mapper namespace="com.igeek.ch01.mapper.UserMapper">

    <!--
        需求1：通过id查询用户信息
        1.id属性 ：作为statement语句的唯一标识 ，在同一个namespace下，不允许重复
        2.parameterType属性：输入参数的类型，?占位符的数据类型（自动完成映射）
        3.resultType属性：查询结果对应的类型（自动完成映射）
        #{}充当之前的占位符?
            若是简单数据类型，{}里面的名字可以任意写；
			若是引用数据类型，{}里面的名字只能与此类型中的属性名一致

		${}拼接sql语句
    -->
    <select id="selectOneById" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>

    <!--
        需求2：根据用户名称模糊查询用户信息
        resultType属性：查询结果对应的类型（自动完成映射）
        若查询出来的数据是若干条，即返回的是集合，则填写单条记录的数据类型
    -->
    <select id="selectListByLikeName" parameterType="String" resultType="User">
        select * from user where username like concat('%',#{username},'%')
    </select>


    <!--
        需求3：添加用户
        parameterType属性：输入参数的类型，?占位符的数据类型（自动完成映射）
        当parameterType给定的是pojo复杂类型，要求#{key}中的key必须与parameterType提供类型中的getXxx()的xxx一致
     -->
    <insert id="insertUser" parameterType="User">
        <!-- 获取自增长id -->
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>

        insert into user values(null,#{username},#{birthday},#{sex},#{address})
    </insert>

</mapper>